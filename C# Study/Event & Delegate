⨀ Delegates(델리게이트)
 - Delegate는 대리자라고도 하며, 메서드에 대한 참조를 갖는 형식이다.
 - 함수포인터나 콜백과 동일한 동작으로 delegate를 호출하면 참조하고 있는 메서드가 호출된다.
 - 참조하는 함수의 반환 형식 및 매개변수를 사용하여 선언한다.
 * 선언한 함수 형식이 일치하는 메서드에 대해서만 참조할 수 있다.
 
⨀ Events(이벤트)
 - 두 오브젝트간의 커플링을 없애기 위해 사용한다.
 - 객체에 특정 작업의 실행을 알리는 메시지, 예를 들면 사용자와의 인터랙션(Interaction)과 같은 처리.
 - 이벤트는 일반적으로 delegate model을 기반으로 하며, 이는 관찰자 디자인 패턴(Observer Design Pattern)을 따른다.
 
⨀ Action
사용할 수 있는 이벤트로는 
Unity에서 제공하는 UnityEvent 나
C# 언어 자체(정확하게는 닷넷 프레임워크)에서 제공하는 EventHandler 가 있지만, 
Action 이라는, C#의 닷넷 프레임 워크에서 제공하는 자체 델리게이트(delegate)를 
이벤트 핸들러 대신으로 사용하곤 한다.
 
 
이벤트 주도적 프로그래밍
Update를 사용하여 매 프레임마다 확인하는 객체가 늘어난다면 속도가 느려질 수 밖에없다.
이때 이벤트 주도적방식을 사용한다면 확인하고싶은 반응이 일어날때만 한번 소식을 받을수있어
최적화의 이점이 있다.
 - ex) AI
 AI의 특징은 첫번째는 게임의 틱(Tick)마다 게임객체들의 로직을 갱신 한다는점입니다.
두번째는 객체들이 다른 객체들과 서로 통신 할수 있어야 한다는점입니다.
 
객체가 게임세계와 상호 작용하는 방식은 누가 주도적이냐에 따라 크게 2가지로 나눌수 있습니다.
하나는 객체가 주도적으로 세계를 인식 하는것(폴링:Polling)이고 
다른 하나는 세계로부터 소식을 기다리게 하는것(이벤트주도:event-driven)이라고 합니다.
 
게임안에서는 수백개의 객체들이 동시에 움직이기 마련이므로 가능한 한 이벤트 주도적방식을 적용하는것이 합리적이라고 볼수 있습니다.
예를들어 미사일이 폭발해서 그 주변에 있는 십여개의 유닛들이 피해를 입는다고 해보겠습니다.
폴링이라는것은 폭발 주변의 유닛들이 자신의 환경을 매 틱마다 조사해서 스스로 폭발을 알아채고 피해치를 처리하는 것이고, 
이벤트 주도적 방식이라는 것은 폭발한 미사일이 주변의 유닛들에게 폭발이 일어난 사실과 피해치를 알려주는 것입니다.
출처: https://smilejsu.tistory.com/638 [{ 일등하이 :Unity3D }:티스토리]
