-가비지 컬렉션

GC ( 가비지 컬렉션 )의 동작 원리

⨀ C# 메모리 할당
- C#은 선형적인 Heap 메모리를 가지고 있으며, 메모리 할당을 위한 포인터 만을 가지고 있음
- 메모리 할당이 필요한 경우 현재 필요한 메모리 크기만큼 증가시키고 0세대값으로 설정. 포인터는 증가된 크기만큼 이동 시킴 
- 할당을 위한 충분한 메모리가 없을 경우, GC가 호출되고 GC가 호출됨에도 충분한 메모리가 없을 경우에는 Heap메모리가 확장 됨. 대부분의 Unity 플램폼의 경우 힙의 크기를 2배로 늘림
- 만일 사용 가능한 메모리 공간이 부족해지는 경우 앱이 강제 종료 됨

⨀ C# 메모리 해제
- GC 는 시스템의 실제 메모리가 부족 하거나, Managed Heap에 할당된 개체에 사용되는 메모리가 허용되는 임계 값을 넘었을 때, GC.Collect 메서드가 호출 될 때 발생
- GC는 힙 메모리 상에서 사용 중인 객체들의 참조 그래프를 가지고 있으며, 이를 통해 현재 사용 중이지 않은 메모리를 해제하고 사용 중인 메모리는 재배치를 하게 됨
- 참조 그래프의 Root는 Stack에 있는 로벌 켠수, 정적 빌드, 전역 변수 등이 되고, 하위는 객체 간의 참조가 될 수 있음

⨀ 세대별 가비지 컬렉션
-최근에 할당된 메모리부터 GC가 한번 불릴 때마다 살아 남은 메모리까지 0 ~ 2 세대까지 분리
- 최근에 생성될 객체일 수록 메모리 해제가 발생할 가능성이 높기 때문에 0 세대의 메모리 부터 관리
- 0세대의 GC에서 남아 있는 메모리는 1세대로 변경 됨, 1세대의 GC가 발생하고 남이 있는 1세대는 2세대로 변경 됨
- 0 세대의 메모리 관리 후에도 메모리가 부족해지면 1세대 -> 2세대 순으로 메모리를 관리

--------------------------------------------------------------------------------------------------------------------------------------------
메모리 관리 기법 중의 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 필요없게 된 영역을 해제하는 기능.
할당된 힙 안의 객체들의 크기가 임계치를 넘어가는 순간 GC(Garbage Collection)을 수행하여 힙 메모리를 관리함.

GC가 수행되는 순간 현재 수행중인 Thread들을 모두 중단시키고 GC Thread를 활성화한다. 
GC Thread는 힙 상에서 사용 중인 객체 참조 그래프를 생성하고 사용 중인 객체의 위치를 재조정함으로써 사용하지 않는 객체들을 모두 힙 상에서 제거한다.

⨀ 장점
- 유효하지 않은 포인터 접근 방지
- 포인터 이중 해제 방지
- 메모리 누수 방지

⨀ 단점
- 어떤 메모리를 해제할 지 결정하는 데 비용이 든다
- GC가 일어나는 타이밍이나 점유 시간을 미리 예측하기 힘들다
- 할당된 메모리가 해제되는 시점을 알 수 없다

루트: 힙에 할당된 메모리의 위치를 참조하는 객체
.NET 애플리케이션이 실행되면 JIT 컴파일러가 이 루트들을 목록으로 만들고, CLR은 이 루트 목록을 관리하며 상태를 갱신. GC는 CLR이 관리하는 루트 목록을 참조해서 GC를 수행

⨀ GC 수행 순서
- 루트 목록을 순회하며 힙 객체와 루트간의 관계 여부 조사
- 어떤 루트와도 관계가 없는 힙을 삭제
- 쓰레기(삭제된 힙)가 차지하고 있던 공간을 밀어넣으며 힙 정리(외부 단편화 제거)
