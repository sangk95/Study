Binary Search Tree (이진탐색트리)

이진탐색트리란 이진탐색(binary search)과 연결리스트(linked list)를 결합한 자료구조의 일종이다. 
이진탐색의 효율적인 탐색 능력을 유지하면서도, 빈번한 자료 입력과 삭제를 가능하게끔 고안됐다.
이진탐색의 경우 탐색에 소요되는 계산복잡성은 O(logn)으로 빠르지만 자료 입력, 삭제가 불가능하다.
연결리스트의 경우 자료 입력, 삭제에 필요한 계산복잡성은 O(1)로 효율적이지만 탐색하는 데에는 O(n)의 계산복잡성이 발생한다.
두 마리 토끼를 잡아보자는 것이 이진탐색트리의 목적이다.

⨀ 특징
 - 각 노드의 왼쪽 서브트리에는 해당 노드의 값보다 작은 값을 지닌 노드들로 이루어져 있다.
 - 각 노드의 오른쪽 서브트리에는 해당 노드의 값보다 큰 값을 지닌 노드들로 이루어져 있다.
 - 중복된 노드가 없어야 한다.
 - 왼쪽 서브트리, 오른쪽 서브트리 또한 이진탐색트리이다.
 - 이진 탐색 트리의 탐색 연산은 트리의 높이(height)가 h라면 O(h)의 시간 복잡도를 갖는다.
 
◾ 순회
이진탐색트리를 순회할 때는 중위순회(inorder) 방식을 쓴다.
왼쪽 서브트리-노드-오른쪽 서브트리 순으로 순회한다.
이렇게 하면 이진탐색트리 내에 있는 모든 값들을 정렬된 순서대로 읽을 수 있다.

◾ 탐색
1. 루트 노드의 키와 찾고자 하는 값을 비교한다. 찾고자 하는 값이라면 탐색을 종료한다.
2. 찾고자 하는 값이 루트 노드의 키보다 작다면 왼쪽 서브 트리로 탐색을 진행한다.
3. 찾고자 하는 값이 루트노드의 키보다 크다면 오른쪽 서브트리로 탐색을 진행한다. 

위 과정을 찾고자 하는 값을 찾을 때까지 반복해서 진행한다. 
만약 값을 찾지 못한다면 그대로 종료한다.
이러한 탐색 과정을 거치면 최대 트리의 높이(h)만큼의 탐색이 진행되게 된다.

◾ 삽입
1. 삽입할 값을 루트 노드와 비교해 같다면 오류를 발생한다( 중복 값 허용 X )
2. 삽입할 값이 루트 노드의 키보다 작다면 왼쪽 서브 트리를 탐색해서 비어있다면 추가하고, 비어있지 않다면 다시 값을 비교한다.
3. 삽입할 값이 루트노드의 키보다 크다면 오른쪽 서브트리를 탐색해서 비어있다면 추가하고, 비어있지 않다면 다시 값을 비교한다.

◾ 삭제
1. 삭제하려는 노드가 단말 노드(leaf node) 일 경우
- 자식이 없는 단말 노드의 삭제는 간단하다.
  삭제할 노드의 부모 노드가 있다면 부모 노드의 자식 노드를 NULL로 만들고,
  삭제할 노드를 삭제(메모리 해제) 해주면 된다.
  
2. 삭제하려는 노드의 서브 트리가 하나인 경우(왼쪽 혹은 오른쪽 서브 트리)
- 삭제하려는 노드의 서브 트리가 하나인 경우도 간단하다. 
  삭제할 노드의 자식노드를 삭제할 노드의 부모노드가 가리키게 하고 해당 노드를 삭제하면 된다. 

3. 삭제하려는 노드의 서브 트리가 두 개인 경우
1) 삭제할 노드 왼쪽 서브 트리의 가장 큰 자손을 해당 노드의 자리에 올린다.
- 삭제할 노드의 왼쪽 서브 트리에서 가장 큰 자손을 해당 노드의 자리에 올리면,
  이진 탐색 트리의 조건을 만족하면서 트리가 유지되는 것을 확인할 수 있다.
  또한 자리를 옮기면서 다른 노드들도 자리가 적절히 이동한다.
2) 삭제할 노드 오른쪽 서브 트리의 가장 작은 자손을 해당 노드의 자리에 올린다.
- 삭제할 노드의 오른쪽 서브 트리에서 가장 작은 자손을 해당 노드의 자리에 올리면,
  이진 탐색 트리의 조건을 만족하면서 트리가 유지되는 것을 확인할 수 있다.
  또한 자리를 옮기면서 다른 노드들도 자리가 적절히 이동한다.

◾ Skewed Binary Tree(사향트리)
노드들이 한쪽으로 일렬로 기울어진 Skewed Tree인 경우, 
검색영역을 n-1로만 줄이기 때문에 O(n)만큼의 시간이 소요된다.
즉, 예를 들어 소트된 데이터를 이진탐색트리에 추가하게 되면,
한쪽으로 치우쳐 진 트리가 생겨 검색시간이 O(n)으로 떨어지게 되는데, 
이러한 현상을 막기 위하여 노드 추가/갱신시 
트리 스스로 다시 밸런싱(Self balancing)하여검색 최적화를 유지할 수 있다.
이러한 트리를 Self-Balancing Binary Search Tree 또는 Balanced Search Tree라 하는데,
가장 보편적인 방식으로 AVL Tree, Red-Black Tree 등을 들 수 있다.

.NET에서 MAP ADT를 구현한 클래스로는
해시테이블을 이용한 Hashtable/Dictionary클래스,
이진검색트리를 이용한 SortedDictionary, 
그리고 배열을 이용한 SortedList 등이 있다.
