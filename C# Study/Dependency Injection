⨀ 종류

1. 생성자 주입(Constructor Injection)
생성자 주입(Constructor Injection)은 생성자를 통해 의존 관계를 주입하는 방법이다.
생성자의 호출 시점에 1회 호출 되는 것이 보장된다.
그렇기 때문에 주입받은 객체가 변하지 않거나, 
반드시 객체의 주입이 필요한 경우에 강제하기 위해 사용할 수 있다.

2. 메소드 주입(Method Injection)
MonoBehaviour 파생 클래스에서는 생성자(constructor)를 사용할 수가 없다.
때문에 함수를 이용해서 디펜던시를 주입해아 한다.
이 경우 해당 함수가 실행됐는지 확인하는 별도의 변수를 사용하여
중복 실행을 방지한다.

--------------------------------------------------------------------------------------

⨀ 디펜던시 인젝션(Dependency Injection)이 꼭 필요한가?

유니티로 게임을 개발할 때, 디펜던시 인젝션을 꼭 사용해야 하는 것은 아니다.
유니티는 기본적으로 컴포넌트(Component) 기반으로 설계되었기 때문에,
GetComponent<T>() 명령어를 이용해서 디펜던시를 사용하는 것이 일반적인 방법이다.
따라서 MonoBehaviour 클래스에서 파생된 유니티 클래스들을 사용할 경우에는
유니티에서 권장하는 방식을 사용하면 된다.
하지만 MonoBehaviour 의 상속 클래스를 사용하지 않는 경우나
하나의 인터페이스로부터 파생된 다수의 클래스 인스턴스들을 
손쉽게 교체해 가면서 사용하고자 할 때, 
또는 가급적 느슨한 커플링을 구현하고자 하는 경우, 
디펜던시 인젝션은 권장할만한 방법이다.

-> 이벤트를 사용한다면 디펜던시에 대해서 신경쓰지 않고 서로 커뮤니케이션 할 수 있다.
