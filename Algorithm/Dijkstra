-다익스트라 알고리즘

⨀ BFS와의 차이점
ο BFS
BFS는 가중치 그래프에선 사용할 수 없다.
예약된 정점들 중 들어간지 가장 오래된 애가 가장 좋은 정점이었음
모두 가중치 없이 동일 했었으니까 줄을 가장 오래선 애를 선택했을 뿐.
따라서 방문 대기열의 자료구조를 🎀큐로 쓰는게 적합
가중치는 모두가 다 동일하니까(즉 비교 가능한 가중치가 없고) 예약된지 오래된 순서로 방문하면 되기 때문에

ο Dijkstra (다익스트라)
다익스트라는 가중치 그래프에서 사용할 수 있다.
예약된 순서는 아무런 상관이 없다.
가중치가 다 다르기 때문에 예약된 정점은 언제든지, 그때 그때 상황에 따라 중요도 순서가 뒤집힐 수 있다.
따라서 큐(Queue)는 다익스트라 자료구조로는 적합하지 않다.
각 상황에 맞는 베스트 솔루션(= 최단 거리, 최소 가중치)을 예약 목록에서 선택한다. 
예약된 정점들 중 여태 방문해온 정점들에서 이 정점을 선택했을 때 최단 경로가 된다! 싶은 정점을 선택한다. 그게 가장 좋은 정점.
따라서 방문 대기열의 자료구조를 🎀우선순위 큐로 쓰는게 적합
가중치 있는 그래프에서 사용하는 BFS 라고 생각하면 될 것 같다.

⨀ 구현
ο 순차 탐색
'방문하지 않은 노드 중 거리값이 가장 작은 노드'를 선택해 다음 탐색 노드로 삼는다. 
그 노드를 찾는 방식이 순차 탐색이 된다. 
즉 거리 테이블의 앞에서부터 찾아내야 하므로 노드의 개수만큼 순차 탐색을 수행해야 한다.
따라서 노드 개수가 N이라고 할 때 각 노드마다 최소 거리값을 갖는 노드를 선택해야 하는 
순차 탐색이 수행되므로 (N−1)×N = O(N^2) 의 시간이 걸린다.

ο 우선순위 큐
순차 탐색을 사용할 경우 노드 개수에 따라 탐색 시간이 매우 오래 걸릴 수 있다. 이를 개선하기 위해 우선순위 큐를 도입하기도 한다.
거리 값을 담을 우선순위 큐는 힙으로 구현하고, 만약 최소 힙으로 구현한다면 매번 루트 노드가 최소 거리를 가지는 노드가 될 것이다.
최대 힙을 최소 힙으로 쓰려면 저장되는 값에 -를 붙여 음수로 만들면 된다.

우선순위 큐에서 사용할 '우선순위'의 기준은 '시작 노드로부터 가장 가까운 노드'가 된다.
따라서 큐의 정렬은 최단 거리인 노드를 기준으로 최단 거리를 가지는 노드를 앞에 배치한다.
순차 탐색과는 다르게 우선순위 큐를 사용하면 방문 여부를 기록할 배열은 없어도 된다. 
우선순위 큐가 알아서 최단 거리의 노드를 앞으로 정렬하므로 기존 최단 거리보다 크다면 무시하면 그만이다. 
만약 기존 최단거리보다 더 작은 값을 가지는 노드가 있다면 그 노드와 거리를 우선순위 큐에 넣는다. 
우선순위 큐에 삽입되는 형태는 <거리, 노드> 이다. (우선순위큐는 first값을 기준으로 max-heap 하므로)
간선의 수를 E(Edge), 노드의 수를 V(Vertex)라고 했을 때 O(E logV)가 된다.
우선순위 큐에서 꺼낸 노드는 연결된 노드만 탐색하므로 최악의 경우라도 총 간선 수인 E만큼만 반복한다. 
즉 하나의 간선에 대해서는 O(logE)이고, E는 V^2 보다 항상 작기 때문에
E개의 간선을 우선순위 큐에 넣었다 빼는 최악의 경우에 대해서는 O(E logV)이다. -> O(N logN)

