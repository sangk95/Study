🖐 OOP의 5원칙 (SOLID)

S (SRP : Single Responsibility Principle)
한 클래스는 하나의 책임만 가져야 한다.

- 클래스는 그 책임을 완전히 ⭐캡슐화해야 함을 일컫는다. 
클래스가 제공하는 모든 기능은 이 책임과 주의 깊게 부합해야 한다.

---------------------------------------------------------------------------------

O (OCP : Open/Closed Principle)
확장에는 열려(Open) 있으나, 변경에는 닫혀(Closed)있어야 한다.

- 객체 지향 프로그래밍 언어(JAVA, C++ 등)에서는 고정되기는 해도 제한되지는 않은,
가능한 동작의 묶음을 표현하는 추상화가 가능하다. 모듈은 추상화를 조작할 수 있다.
이런 모듈은 고정된 추상화에 의존하기 때문에 수정에 대해 닫혀 있을 수 있고,
반대로 추상화의 새 파생 클래스를 만드는 것을 통해 확장도 가능하다. 
따라서 ⭐추상화는 개방-폐쇄 원칙의 핵심 요소이다.

---------------------------------------------------------------------------------

L (LSP : Liskov’s Substitution Principle)
프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.

- LSP의 핵심은 자식 클래스가 항상 부모 클래스의 역할을 충실히 수행하는 것

---------------------------------------------------------------------------------

I (ISP : Interface Segregation Principle)
특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.

- 인터페이스 분리 원칙을 통해 시스템의 내부 의존성을 약화시켜 
  리팩토링, 수정, 재배포를 쉽게 할 수 있다.

---------------------------------------------------------------------------------

D (DIP : Dependency Inversion Principle)
추상화에 의존한다. 구체화에 의존하면 안된다.

- 첫째, 상위 모듈은 하위 모듈에 의존해서는 안된다. 상위 모듈과 하위 모듈 모두 추상화에 의존해야 한다.
  둘째, 추상화는 세부 사항에 의존해서는 안된다. 세부사항이 추상화에 의존해야 한다.
이 원칙은 '상위와 하위 객체 모두가 동일한 추상화에 의존해야 한다'는 객체 지향적 설계의 대원칙을 제공한다.


🎨OOP의 4가지 특징

1. 캡슐화
실제로 구현 부분을 외부에 드러나지 않도록 하는 것
변수와 메소드를 하나로 묶음
데이터를 외부에서 직접 접근하지 않고 함수를 통해서만 접근
은닉하는 방법으로 접근지정자를 사용한다. 
↳ ex) public, private, protected
public : 모든 접근 허용
private : 자기 클래스 내부의 메서드에서만 접근 허용
protected : 자기 클래스 내부 또는 상속받은 자식 클래스에서 접근 허용

2. 상속
자식 클래스가 부모 클래스의 특성과 기능을 물려받는 것
기능의 일부분을 변경하는 경우 자식 클래스에서 상속받아 수정 및 사용함
상속은 캡슐화를 유지, 클래스의 재사용이 용이하도록 해 준다.

3. 추상화
인터페이스로 클래스들의 공통적인 특성(변수, 메소드)들을 묶어 표현하는 것

4. 다형성
어떤 변수,메소드가 상황에 따라 다른 결과를 내는 것


