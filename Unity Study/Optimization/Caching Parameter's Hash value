⚠⚠⚠ 예제코드 프로파일링 결과 ⚠⚠⚠ 
- 실행시간이 오히려 늘어남
- 기존에 사용하던 대로 string으로 사용하자 




Unity의 Animator 컴포넌트는 애니메이션 클립을 찾고 재생하기 위해 문자열을 해시화하여 사용하는 기술을 사용한다.
이를 통해 런타임에서 문자열을 비교하는 대신 정수값으로 비교한다면 더 빠르게 애니메이션을 찾을 수 있다.

Animator 컴포넌트 내부에서는 문자열 대신 정수 값을 사용하여 애니메이션을 식별하고 관리한다.

Animator.Play("abc") 를 사용한다면 유니티 내부적으로
Animator.StringToHash() 메서드를 사용하여 문자열을 해시값으로 변환 후 비교하므로,
미리 해시값을 캐싱해 놓는것이 성능상에 이점이 있다.

⭐ parameter ID의 Hash value 캐싱
animator나 material, shader의 parameter를 호출할 때,
간편하게 string형으로 호출하는 경우가 많다.
---------------------------------------------
animator.SetTrigger("Attack");
material.SetTexture("_MainMap", texture);
shader.SetGlobalColor("_MainColor", color);
---------------------------------------------
명시성도 좋고 간편하지만, 성능상으로는 매번 문자열에서 Hash로 변환하기때문에 성능상 좋지않다고한다.
아래와같이 멤버변수로 캐싱해놓고 쓰는 것을 추천한다.
---------------------------------------------
int id = Animator.StringToHash("Attack");
animator.SetTrigger(id);
int id = Shader.PropertyToID("_MainMap");
material.SetTexture(id, texture);
int id = Shader.PropertyToID("_MainColor");
shader.SetGlobalColor(id, color);
---------------------------------------------


🔴 예제

public enum EAnimationHashValue
{
    Default,
    Walk,
    Run,
    Jump,
    Swimming,

    End
}

public class AnimatorExample : MonoBehaviour
{
    private Animator animator;
    private Dictionary<EAnimationHashValue, int> animationHashMap = new Dictionary<EAnimationHashValue, int>();

    void Start()
    {
        animator = GetComponent<Animator>();

        // 모든 애니메이션 이름들의 해시 값을 동적으로 생성하여 맵에 추가합니다.
        for (int i = (int)EAnimationHashValue.Default + 1; i < (int)EAnimationHashValue.End; i++)
        {
            string animationName = ((EAnimationHashValue)i).ToString();
            int animationHash = Animator.StringToHash(animationName);
            animationHashMap[(EAnimationHashValue)i] = animationHash;
        }
    }

    void Update()
    {
        // 애니메이션 재생
        if (Input.GetKeyDown(KeyCode.Alpha1))
        {
            PlayAnimation(EAnimationHashValue.Walk);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha2))
        {
            PlayAnimation(EAnimationHashValue.Run);
        }
    }

    void PlayAnimation(EAnimationHashValue animation)
    {
        int animationHash;
        if (animationHashMap.TryGetValue(animation, out animationHash))
        {
            animator.Play(animationHash);
        }
        else
        {
            Debug.LogWarning("Animation not found: " + animation.ToString());
        }
    }
}

