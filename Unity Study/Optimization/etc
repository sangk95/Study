⨀ Accelerometer Frequency 감소 또는 비활성화 
Unity는 모바일 기기의 가속도 센서를 1초에도 몇 번씩 풀링합니다.
애플리케이션에서 가속도 센서를 사용하지 않는다면 비활성화하거나 빈도를 줄이자.

⨀ 동적 광원 수 줄이기 
모바일 게임에는 동적 광원을 지나치게 많이 추가하지 않는 것이 매우 중요합니다.
동적 메시에는 커스텀 셰이더 이펙트나 라이트 프로브, 정적 메시에는 베이크된 광원과 같은 대안을 고려하자.

⨀ 그림자 비활성화 
MeshRenderer 및 광원별로 그림자 드리우기를 비활성화할 수 있습니다. 
가능하면 그림자를 비활성화하여 드로우 콜을 줄이세요.

⨀ parameter ID의 Hash value 캐싱
animator나 material, shader의 parameter를 호출할 때,
간편하게 string형으로 호출하는 경우가 많다.
---------------------------------------------
animator.SetTrigger("Attack");
material.SetTexture("_MainMap", texture);
shader.SetGlobalColor("_MainColor", color);
---------------------------------------------
명시성도 좋고 간편하지만, 성능상으로는 매번 문자열에서 Hash로 변환하기때문에 성능상 좋지않다고한다.
아래와같이 멤버변수로 캐싱해놓고 쓰는 것을 추천한다.
---------------------------------------------
int id = Animator.StringToHash("Attack");
animator.SetTrigger(id);
int id = Shader.PropertyToID("_MainMap");
material.SetTexture(id, texture);
int id = Shader.PropertyToID("_MainColor");
shader.SetGlobalColor(id, color);
---------------------------------------------

⨀ Transform
트랜스폼을 변화시키면 해당 오브젝트의 모든 자식들에게 OnTransformChanged 이벤트가 전파된다.
여러 계산을 통해 트랜스폼을 변화시킨다면 따로 적용하지 말고, 모든 계산이 끝난 뒤 최종 값을 적용하자.
아래의 예는 SetPositionAndRotation을 통해 두 번의 트랜스폼 메시지를 한 번으로 최적화할 수 있다.
// 트랜스폼이 두 번 변한다.
transform.position = Vector3.one;
transform.rotation = Quaternion.identity;
// 트랜스폼이 한번에 적용된다.
transform.SetPositionAndRotation(Vector3.one, Quaternion.identity);
Transform.localPosition은 트랜스폼 내부에 캐싱되지만 
Transform.Position은 가져올 때마다 계산되기 때문에 훨씬 무겁다. 
Transform.Position을 자주 사용한다면 가능한 한 캐싱하도록 하자.

GameObject.Instantiate(prefab, parent);
->  GameObject.Instantiate(prefab, parent, position, rotation);

⨀ sqrMagnitude 단순한 거리 비교
플레이어를 기준으로 두 몬스터 중 어느 몬스터가 더 가까운가? 는 어느 게임에서나 사용되는 계산식이다.
플레이어로부터 각 지점의 벡터 값을 뺀 뒤, 벡터의 크기(magnitude)를 통해 거리의 대소를 비교할 수 있다.
벡터의 크기를 계산할 때는 삼각함수를 통해 제곱근을 계산한다.
c^2 = a^2 + b^2으로 C^2를 구하고, C^2의 제곱근을 구하기 위해 루트 함수를 사용하게 된다.
하지만 k^2와 j^2의 대소 관계가 k^2 > j^2 라면, 그 제곱근인 k > j의 관계도 성립한다.
따라서 단순히 거리 비교를 하기 위해서라면 제곱근을 구하지 말고 ^2 상태에서 비교하는 것이 좋다.  
거리의 대소 비교에서는 Vector3.magnitude나 Vector3.Distance 대신 Vector3.sqrMagnitude를 사용하자

⨀ 힙 메모리에 할당 하지 않게하자.
o Unity 함수 호출에서 발생하는 가비지
GameObject.tag -> GameObject.CompareTag()
Input.GetTouch() -> Input.touches

GameObject.tag이나 GameObject.name 접근 시에도 매번 문자열을 생성해서 반환한다. 
void OnTriggerEnter(Collider other)
{
    if(other.gameObject.tag == "Player")
    {
        //...
    }
}
태그 비교는 GameObject.CompareTag()를 사용하면 힙 할당을 하지 않는다.
string playerTag = "Player";
void OnTriggerEnter(Collider other)
{
    if(other.gameObject.CompareTag(playerTag))
    {
        //...
    }
} 

이외에도 힙 할당을 발생하는 유니티 함수들과 힙 할당을 하지않은 대체용 함수들이 존재한다.
Input.GetTouch()와 Input.touchCount는 힙 할당을 일으키니 Input.touches를 사용한다.

o 코루틴에서 발생하는 가비지
yield 자체는 힙 할당을 하지 않지만 전달하는 값은 박싱이 되기 때문에 힙 할당이 발생할 수 있다.
yield return 0; // 0인 int 값 변수가 boxing되기 때문에 가비지를 발생시킨다.
new 를 통해 생성하는 객체는 가비지를 만든다.
---------------------------------------------
While(true)
{
    yield return new WaitForSeconds(1f); // 매번 새로운 객체가 생성된다.
}
---------------------------------------------
WaitForSecond 또한 객체이기 때문에 멤버 변수나 지역변수로 캐싱할 수 있다.
---------------------------------------------
WaitForSeconds delay = new WaitForSeconds(1f);
While(true)
{
    yield return delay;
}
---------------------------------------------
