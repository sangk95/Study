- 옵저버 패턴 

C# -> Delegate (옵저버 객체들을 리스트로 관리할 필요가 없다)

옵저버 패턴은 한 Object의 상태가 바뀌면 그 객체에 의존(구독) 하는 다른 객체들한테 
연락이 가고 자동으로 내용이 갱신되는 방식으로 1:N(1대다) 관계를 정의합니다.
예시로 유튜브에서 구독자에게 알림 메시지를 보내는 것처럼 관찰 중인 객체에서 
발생하는 이벤트를 여러 다른 객체에 알리는 메커니즘입니다.

장점 :  변경 사항이 생겨도 무난히 처리할 수 있는 유연한 객체지향 시스템을 구축할 수 있습니다.
        이는 객체 사이의 상호의존성을 최소화할 수 있기 때문입니다. (느슨하게 결합되어 있기 때문)
        Open / Close 원칙(OCP)을 지킬 수 있습니다. 
        (OCP : 확장에는 열려있고, 변경에는 닫혀있어야 한다)
단점 :  Observer에게 알림이 가는 순서를 보장할 수 없습니다.
        Observer, Subject의 관계가 잘 정의되지 않으면 원하지 않는 동작이 발생할 수 있습니다.
        대상이 관찰자 메서드를 직접 호출하기 때문에 모든 관찰자가 알림 메서드를 반환하기 전에는 다음 작업을 진행할 수 없습니다.
        
- 느슨한 결합(Loose Coupling) ❓
느슨한 결합이란 두 객체가 상호작용을 하지만, 서로에 대해 잘 모른다는 점을 의미합니다.
인터페이스를 이용하여 객체간의 느슨한 결합이 가능합니다.
상속을 통한 구현이 아닌 구성(Composition)을 이용해야 합니다.
