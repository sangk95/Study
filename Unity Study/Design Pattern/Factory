- 팩토리

⨀ 팩토리 메소드 패턴
팩토리 메소드 패턴에서는 객체를 생성하기 위한 인터페이스를 정의하는데,
어떤 클래스의 인스턴스를 만들지는 서브 클래스에서 결정한다.
팩토리 메소드 패턴을 이용하게 되면 클래스의 인스턴스를 만드는 일을 서브클래스에게 맡긴다.

각 몬스터별로 생성 함수를 따로 정의해주는 것이 팩토리 메소드 패턴의 요점이다.
팩토리 메소드 패턴을 만드는 방식은 아래와 같다.
1. 최상위 Factory를 abstract class로 만들어준다. 그 안에 CreateMonster라는 함수를 선언해준다.
2. 고블린은 GoblinFactory, 오크는 OrcFactory 이런식으로 몬스터별로 팩토리를 따로 만들어준다.
3. 각 몬스터 팩토리는 CreateMonster라는 함수를 각자 알아서 정의해준다.
4. 고블린을 만들어야 한다면 GoblinFactory를 하나 생성해주고 거기서 고블린을 만들어준다.

목적 :  인스턴스를 생성하는 책임을 구체적인 클래스가 아닌 추상적인 인터페이스의 메소드로 감싸는 것.


⨀ 추상 팩토리 패턴
서로 연관되거나 의존적인 객체들의 조합을 만드는 인터페이스를 제공하는 패턴
즉, 관련성 있는 여러 종류의 객체를 일관된 방식으로 생성하는 경우에 유용하다.

보스 종류 1 : 고블린 & 칼
보스 종류 2 : 오크 & 도끼
지금은 2종류의 보스 뿐이지만, 계속해서 보스와 무기가 추가될 예정이라면? 
칼을든 고블린 뿐만 아니라 창을 든 고블린, 활을 든 고블린, 또는 오크가 칼을 들고 있다면?
이런식으로 부품을 끼워 맞추듯이 몬스터와 무기를 매칭시켜주는 방식이라면 추상팩토리 패턴을 사용하는게 좋다.

목적 :  여러 관련있는 객체를 만들어주기 위함



⨀ 추상팩토리 VS 팩토리 메소드 패턴 
추상 팩토리 패턴 -   몬스터의 종류, 패턴, 무기가 다를 때
팩토리 메소드 패턴 - 몬스터의 종류만 다를 때

추상팩토리와 팩토리 메소드 패턴은 뭐가 더 좋은걸까? 
답은 없다. 상황에 따라 다르다. 
GoblinFactory처럼 하나의 카테고리 안의 완제품(레드고블린, 그린고블린)을
매개변수에 따라 만들어줄 때는 팩토리 메소드가 좋다.
하지만 2개 이상의 인스턴스를 조합하는 
공정에서는(여기서는 몬스터와 무기를 골라서 보스를 만들때) 추상팩토리가 더 좋다. 
경우에 따라서는 2개의 장점을 섞어서 만들거나, 
둘 다 필요가 없는 아주 간단한 기능의 구현 때는 심플 팩토리로 시간을 절약하며 개발하는 경우도 있다. 

"구체적인 팩토리에서 구체적인 인스턴스를 만드는 것" 까진 팩토리 메서드 패턴과
매우 유사하지만 팩토리를 사용하는 초점이 클라이언트쪽에 있다 보니 다른 구조를 띈다.

추상 팩토리 패턴은 클라이언트 코드에서 팩토리로부터 객체(제품)를 생성하고 
사용하는 코드를 인터페이스 기반으로 작성할 수 있게끔 한다.
팩토리 메서드 패턴의 핵심은 제품(객체)을 생성하는 추상 메서드와 이를 오버라이드해 
필요한 제품을 생성하는 메서드 그 자체라고 볼 수 있고,
추상 팩토리 패턴은 제품(객체)을 생성하는 한 개 이상의 추상 메서드를 가진 
인터페이스와 이를 구현한 콘크리트 팩토리의 객체에 초점이 맞춰져 있다. 
