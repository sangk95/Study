해시 테이블은 (Key, Value)로 데이터를 저장하는 자료구조 중 하나로 
빠르게 데이터를 검색할 수 있는 자료구조이다. 
해시 테이블이 빠른 검색속도를 제공하는 이유는 
내부적으로 배열(버킷)을 사용하여 데이터를 저장하기 때문이다. 
해시 테이블은 각각의 Key값에 해시함수를 적용해(해싱) 배열의 고유한 index를 생성하고,
이 index를 활용해 값을 저장하거나 검색하게 된다.
여기서 실제 값이 저장되는 장소를 버킷 또는 슬롯이라고 한다.

경우에 따라 서로 다른 키가 동일한 해시테이블 버켓 위치를 가리킬 수 있는데,
이를 해결하기 위해 여러 Collision Resolution 방식이 사용된다. 
Collision Resolution의 방식으로 Chaining을 비롯하여 
Linear Probing, Quadratic Probing, Double Hashing 등 여러가지가 있다.
해시테이블 자료구조는 추가, 삭제, 검색에서 O(1)의 시간이 소요된다.
◾ 데이터의 충돌이 발생한 경우 Chaining에 연결된 리스트들까지
검색을 해야 하므로 O(N)까지 시간복잡도가 증가할 수 있다.


⨀ Hashtable 클래스

.NET에 해시테이블을 구현한 Non-generic 클래스로 Hashtable 클래스가 있다.
Hashtable은 Key값과 Value값 모두 object 타입을 받아들이며, 박싱/언박싱을 하게 된다.
Hashtable은 Double Hashing 방식을 사용하여 Collision Resolution을 하게 된다.
즉, 해시함수를 사용하여 Key가 충돌(Collision)이 발생하면, 다른 해시함수를 계속 사용하여 빈 버켓을 찾게된다.


⨀ Dictionary<Tkey,TValue> 클래스

.NET에 *Generic 방식으로 해시테이블을 구현한 클래스로 Dictionary 클래스가 있다.
Dictionary는 Key값과 Value값 모두 Strong type(정해진 자료형)을 받아들이며, 박싱/언박싱을 일으키지 않는다.
Dictionary는 *Chaining 방식을 사용하여 Collision Resolution을 하게 된다.

*Generic이란 데이터의 타입(data type)을 일반화한다(generalize)는 것을 의미한다.
제네릭은 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법이다.
이렇게 컴파일 시에 미리 타입 검사(type check)를 수행하면 다음과 같은 장점을 가진다.
1. 클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있다
2. 반환값에 대한 타입 변환 및 타입 검사에 들어가는 노력을 줄일 수 있다.

*Chaining 기법은 충돌이 발생하면 해당 버킷을 링크드 리스트로 연결한다. (공간의 확장)
Chaining 방식은 해시 테이블의 확장이 필요없고 간단하게 구현이 가능하며,
손쉽게 삭제할 수 있다는 장점이 있다. 
하지만 데이터의 수가 많아지면 동일한 버킷에 chaining되는 데이터가 많아지며 
그에 따라 캐시의 효율성이 감소한다는 단점이 있다.



