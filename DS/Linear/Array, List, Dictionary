- 배열, 리스트

o 배열
- 추가 : O(n)
- 검색 : O(n)
- 삭제 : O(n)
- 접근 : O(1)
- 데이터 할당 시 데이터 크기가 정해져 있을 때 사용.
- 연속된 메모리 공간이므로 메모리 관리가 용이하지만, 추가/삭제가 비효율적이다.
- 특정 위치의 데이터 조회가 많을 때 사용.

o 리스트
- 데이터 할당 시 데이터 크기가 정해져있지 않을 때 사용.
- 포인터를 사용하여, 다음 데이터의 주소 값을 가지고 있기에 데이터 추가/삭제가 편리하다.
- 특정 위치의 데이터 조회가 적을 때 사용.

o List<T>
- 추가 : O(1)
- 검색 : O(n)
- 삭제 : O(n)
- 접근 : O(1)
- 빈틈없이 데이터의 적재하는 장점
insert메서드를 사용하면 특정 위치에 원소를 추가할 수 있는데
그렇게 되면 특정 원소 뒤에 있는 모든 원소는 뒤로 밀려난다.
그렇기 때문에 O(n)의 시간이 걸리게된다.
Add는 단순히 맨마지막에 추가하는 것이기 때문에 O(1)이다.

o LinkedList<T>
- 추가 : O(1)
- 검색 : O(n)
- 삭제 : O(1)
- 접근 : O(n)
- 자료의 삽입과 삭제가 용이하다.
값을 들고있는 노드들과 다음/이전 노드의 포인터를 갖고있는 자료구조이며,
특정 노드에서 노드를 삽입,삭제하기에 편리하다.
특정 값을 검색하기 위해서는 전체 노드를 검사해야 하므로 효율적이지 않음

o Dictionary<K,T>
- 추가 : O(1)
- 검색 : O(1)
- 삭제 : O(1)
- 검색,삭제,추가가 상수시간의 시간복잡도를 가진다.
헤쉬테이블과 비슷하지만 자료형을 명확하게 설정하기에 보다 효율이 좋을 경우가 많다.
