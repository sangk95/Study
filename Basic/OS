운영체제

🚀 메모리영역
- 코드, 데이터, 힙, 스택
코드 - 소스코드
데이터 - 전역, static
힙 - 동적할당 받은 메모리 / 참조타입
스택 - 지역,매개변수 / 값타입 / 함수호출시 생성, 종료시 반환


🚀 빌드과정
전처리(프리프로세스) - 컴파일 - 어셈블 - 링크
- 컴파일 : 어셈블리어로 변환
- 어셈블 : 오브젝트파일로 변환
- 링크 : 실행파일로 변환


🚀 임계영역
둘 이상의 스레드가 동시에 접근해서는 안되는 공유자원에 접근하는 코드의 일부 / 지정된 시간이 지난 후 종료된다.
-> 어떤 스레드(프로세스)가 임계영역에 들어가고자 한다면 지정된 시간만큼 대기
-> 프로세스간에 공유자원을 접근하는데 있어 문제가 발생하지 않도록 한번에 하나의 프로세스만 이용하게끔 보장 필요

🔸조건
- 상호배제 : 하나의 프로세스가 임계영역에 들어가있다면 다른프로세스는 들어갈 수 없어야 한다.
- 진행 : 임계영역에 들어간 프로세스가 없을 때 들어가려하는 프로세스가 여러개라면 하나를 결정해줘야 한다.
- 한정대기 : 다른프로세스의 기아를 방지하기 위해, 한번 임예영역에 들어간 프로세스는 다시 들어갈때 제한을 둬야한다.


🚀 데드락
- 둘 이상의 프로세스가 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고있는 자원을 요구하며 무한정 대기하는 상태

🔸데드락이 일어나는 4가지 조건
- 비선점 : 다른프로세스의 자원을 뺏을 수 없다.
- 순환대기 : 프로세스들이 서로의 자원을 기다려야한다.
- 점유대기 : 프로세스가 하나 이상의 자원을 점유한채로 다른 프로세스가 가지고있는 자원을 요구/대기한다.
- 상호배제 : 한 자원은 한번에 한 프로세스만이 사용할 수 있다.

🔸데드락 방지법
- 방지 : 교착상태가 발생할 수 있는 요구조건을 만족하지 않게 한다.
- 회피 : 교착상태가 발생할 가능성이 있는 자원할당을 하지 않는다. - 은행원알고리즘/자원할당그래프
- 탐지 및 회복 : 교착상태가 발생하도록 놔두고, 발생할 경우 찾아서 고친다.


🚀 프로세스와 쓰레드
프로세스 : 운영체제로부터 자원을 할당받은 작업의 단위 / 자신만의 고유 공간과 자원을 할당받아 사용 / 메모리상에서 실행중인 프로그램
스레드 : 프로세스 안에서 실행되는 흐름의 단위 / 다른 스레드와 공간과 자원을 공유하며 사용

프로세스 : 최소 하나의 스레드를 보유 / 각각 별도의 주소공간을 독립적으로 할당받음(코드/데이터/힙/스택)
스레드 : 스택만 따로 할당받고, 나머지 영역은 스레드끼리 서로 공유


🚀 멀티 프로세스와 멀티 스레드
- 멀티 프로세스
장점 : 하나의 프로세스가 죽어도 다른프로세스에 영향을 끼치지 않고 계속 실행
단점 : 멀티 스레드보다 많은 메모리공간 / CPU시간을 차지

- 멀티 스레드
장점 : 멀티 프로세스보다 적 메모리공간 / CPU시간을 차지
단점 : 하나의 스레드에 문제가 생기면 전체 스레드가 영향을 받으며 동기화 문제가있다.
-> 자원공유에 전역변수를 사용하므로 동기화 문제 발생 가능


🚀 멀티 스레드
- 동시성 : 싱글코어에서 멀티스레드를 동작시키기 위한 방식(코루틴) - 여러개의 스레드가 번갈아가며 실행되는것. (콘텍스트 스위칭 발생)
- 병렬성 : 멀티코어에서 멀티스레드를 동작시키기위한 방식 - 한개 이상의 스레드를 보유한 각 코어들이 동시에 실행되는것.

- 주의사항 : 다수의 스레드가 공유데이터에 동시에 접근하는 경우에 상호배제 또는 동기화 기법을 통해 동시성 문제 또는 교착상태가 발생하지 않도록 주의해야 한다.


🚀 선점형 스케줄링과 비선점형 스케줄링
- 선점형 : 하나의 프로세스가 다른 프로세스 대신에 CPU를 차지할 수 있음
- 비선점형 : 하나의 프로세스가 끝나지 않으면 다른 프로세스는 CPU를 사용할 수 없음


🚀 세마포어와 뮤텍스
- 세마포어 : 공유된 자원의 데이터 or 임계영역에 여러 프로세스/스레드가 접근하지 못하게 하는것
- 뮤텍스 : 공유된 자원의 데이터 or 임계영역에 하나의 프로세스/스레드가 접근하지 못하게 하는것 (상호배제)
