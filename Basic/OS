운영체제

1. 메모리영역
- 코드, 데이터, 힙, 스택
코드 - 소스코드
데이터 - 전역변수, static
힙 - 동적할당 받은 메모리 / 참조타입
스택 - 지역변수, 매개변수 / 함수 호출시 생성, 종료시 반 / 값타입

2. 빌드과정
- 전처리(프로세싱) - 컴파일 - 어셈블 - 링크
컴파일 - 어셈블리어로 변환
어셈블 - 오브젝트파일로 변환
링크 - 실행파일로 변환

3. 임계영역
임계 영역(critical section)은  병렬컴퓨팅에서 둘 이상의 스레드가 
동시에 접근해서는 안되는 공유 자원(자료 구조 또는 장치)을 접근하는
 코드의 일부를 말한다. 임계 구역은 지정된 시간이 지난 후 종료된다.
->  때문에 어떤 스레드(프로세스)가 임계 구역에 들어가고자 한다면 지정된 시간만큼 대기해야 한다. 
-> 프로세스간에 공유자원을 접근하는데 있어 문제가 발생하지 않도록 한번에 하나의 프로세스만 이용하게끔 보장해줘야 한다.

해결 위한 조건
상호 배제(Mutual exclution) - 하나의 프로세스가 임계 영역에 들어가 있다면 다른 프로세스는 들어갈 수 없어야 한다.
진행(Progress) - 임계 영역에 들어간 프로세스가 없는 상태에서 들어가려 하는 프로세스가 여러 개라면 어느 것이 들어갈지 결정 해주어야 한다.
한정 대기(Bounded waiting) - 다른 프로세스의 기아를 방지하기 위해, 한 번 임계 구역에 들어간 프로세스는 다음 번 임계 영역에 들어갈 때 제한을 두어야 한다.

4. 데드락
- 둘 이상의 프로세스가 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고 있는 자원을 요구하며 무한정 기다리는 현상
데드락이 일어나는 4가지 조건
- 비선점 : 다른 프로세스의 자원을 뺏을 수 없음
- 순환 대기 : 두개 이상의 프로세스가 자원 접근을 기다릴때, 관계가 순환적 구조
- 점유 대기 : 공유 자원에 대한 접근 권한을 가진 채로 다른 자원에 대한 접근 권한을 요구
- 상호 배제 : 한번에 한 프로세스만 공유자원에 접근 가능하며, 접근 권한이 제한적일 경우

5. 프로세스와 쓰레드
프로세스 - 메모리 상에서 실행중인 프로그램 / 자신만의 고유 공간과 자원을 할당받아 사용
스레드 - 프로세스 안에서 실행되는 흐름 단위 /  다른 스레드와 공간과 자원을 공유하면서 사용

프로세스는 최소 하나의 스레드를 보유하고 있으며, 각각 별도의 주소공간을 독립적으로 할당 받는다.(code, data, heap, stack)
스레드는 이중에 stack만 따로 할당받고 나머지 영역은 스레드끼리 서로 공유한다.

6. 멀티 프로세스와 멀티 쓰레드
-멀티 프로세스
장점 : 하나의 프로세스가 죽어도 다른 프로세스에 영향을 끼치지 않고 계속 실행된다.
단점 : 멀티 쓰레드보다 많은 메모리 공간과 CPU 시간을 차지한다.

-멀티 쓰레드
장점 : 멀티 프로세스보다 적은 메모리 공간을 차지하고 문맥 전환이 빠르다.
단점 : 하나의 쓰레드에 문제가 생기면 전체 쓰레드가 영향을 받으며 동기화 문제가 생긴다.

💡 멀티 쓰레드의 동시성과 병렬성
동시성 : 멀티 작업을 위해 싱글 코어에서 여러 개의 쓰레드가 번갈아 실행하는 것.
(동시에 실행하는 것처럼 보이지만 사실은 번갈아가며 실행하고 있는 것임)

병렬성 : 멀티 작업을 위해 멀티 코어에서 한 개 이상의 쓰레드를 포함하는 각 코어들을 동시에 실행하는 것.

💡 멀티 쓰레드 환경에서의 주의사항
다수의 쓰레드가 공유 데이터에 동시에 접근하는 경우에 상호배제 또는 동기화 기법을 통해 동시성 문제 또는 교착 상태가 발생하지 않도록 주의해야 합니다.

7. 선점형 스케줄링과 비선점형 스케줄링
선점형 - 하나의 프로세스가 다른 프로세스 대신에 CPU를 차지할 수 있음
비선점형 - 하나의 프로세스가 끝나지 않으면 다른 프로세스는 CPU를 사용할 수 없음

8. 세마포어와 뮤텍스
세마포어 : 공유된 자원의 데이터를 여러 프로세스가 접근하는 것을 막는 것
뮤텍스 : 공유된 자원의 데이터를 여러 쓰레드가 접근하는 것을 막는 것
